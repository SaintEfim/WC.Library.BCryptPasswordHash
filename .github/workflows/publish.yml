name: Publish NuGet Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Publish NuGet Packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Get latest version for WC.Library.BCryptPasswordHash
        id: get-version-bcrypt
        run: |
          PACKAGE_ID="wc.library.bcryptpasswordhash"
          PACKAGE_VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')

          if [ -z "$PACKAGE_VERSION" ]; then
            echo "No versions found on NuGet for $PACKAGE_ID. Starting from 1.0.0."
            NEW_VERSION="1.0.0"
          else
            echo "Latest version of $PACKAGE_ID: $PACKAGE_VERSION"
            NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          fi

          echo "New version for $PACKAGE_ID: $NEW_VERSION"
          echo "bcrypt_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Get latest version for WC.Library.BCryptPasswordHash.Abstactions
        id: get-version-Abstactions
        run: |
          PACKAGE_ID="wc.library.bcryptpasswordhash.abstactions"
          PACKAGE_VERSION=$(curl -s https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID}/index.json | jq -r '.versions[-1]')

          if [ -z "$PACKAGE_VERSION" ]; then
            echo "No versions found on NuGet for $PACKAGE_ID. Starting from 1.0.0."
            NEW_VERSION="1.0.0"
          else
            echo "Latest version of $PACKAGE_ID: $PACKAGE_VERSION"
            NEW_VERSION=$(echo $PACKAGE_VERSION | awk -F. -v OFS=. '{$NF++; print}')
          fi

          echo "New version for $PACKAGE_ID: $NEW_VERSION"
          echo "Abstactions_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update version in WC.Library.BCryptPasswordHash
        run: |
          dotnet build src/WC.Library.BCryptPasswordHash/WC.Library.BCryptPasswordHash.csproj /p:Version=${{ env.bcrypt_version }}

      - name: Update version in WC.Library.BCryptPasswordHash.Abstactions
        run: |
          dotnet build src/WC.Library.BCryptPasswordHash.Abstactions/WC.Library.BCryptPasswordHash.Abstactions.csproj /p:Version=${{ env.Abstactions_version }}

      - name: Build and pack WC.Library.BCryptPasswordHash
        run: dotnet pack src/WC.Library.BCryptPasswordHash/WC.Library.BCryptPasswordHash.csproj -c Release -o ./out

      - name: Build and pack WC.Library.BCryptPasswordHash.Abstactions
        run: dotnet pack src/WC.Library.BCryptPasswordHash.Abstactions/WC.Library.BCryptPasswordHash.Abstactions.csproj -c Release -o ./out

      - name: Publish packages to NuGet
        run: dotnet nuget push ./out/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
